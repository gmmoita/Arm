Próximos passos:
- Aumentar regressão tempo->angulos para 6 features (a.k.a. adicionar cossenos)
 (w0 + w1 * sin(pi*t/200) + w2 * cos(pi*t/200) + w3 * sin(2*pi*t/200) + w4 * cos(2*pi*t/200) + w5 * sin(3*pi*t/200) + w6 * cos(3*pi*t/200))

-- A "Primeira regressão" a ser utilizada daqui pra frente é apenas a "f(step) -> angulo imediato"

- Gerar datasets (para cada w) de delta-w:
{angulo, delta=(w0_semFadiga - w0_fadiga) }

No 1o caso, a gente poderia entao usar o simulador imperfeito para rapidamente estimar os pesos de uma trajetoria (que seria imperfeita). Aí bastaria, para corrigi-los, somar o delta previsto pelo regressao do peso correspondente:
wi_corrigido = wi_imperfeito + delta_previsto_pela_regressao

- Gerar datasets (para cada w) de ratio-w:
{angulo, delta=(w0_semFadiga/w0_fadiga) }

No 2o caso, a gente poderia usar o simulador imperfeito para rapidamente estimar os pesos de uma trajetoria (que seria imperfeita). Aí bastaria, para corrigi-los, multiplicar delta previsto pelo regressao do peso correspondente:
wi_corrigido = wi_imperfeito * delta_previsto_pela_regressao

- Simulador em si deve voltar a funcionar com ângulos diretos ao invés de somando deltas (mas manter um comando para fazer com que ele funcione com deltas, para uso futuro)

Terminologia:

Vamos falar em
angulo-otimo
delta-angle
delta-w
ratio-w
A 1a regressao vai ser de
step -> anguloSemFriccao
pro caso sem friccao.
Ela vai ser dar pesos wi_SemFriccao
e
step -> anguloFriccao
pro caso com friccao,
onde anguloFriccao é obtido pegando o anguloSemFriccao, calculando delta-angles, aplicando a fadiga, e integrando os delta-angles
Ela vai ser dar pesos wi_ComFriccao
A 2a regressao vai ser
regressao_i:
angulo -> (wi_SemFriccao-wi_ComFriccao)
para cada um dos pesos.
Isso no caso em que a 2a regressao implementa predicao de delta-w. No caso de ela implementa predicao de ratio-w, ela vai ser
regressao_i:
angulo -> (wi_SemFriccao/wi_ComFriccao)

sim, fazendo como na mensagem acima, ele vai funcioanr com angulos diretos. A minha sugestao é manter os 2 comandos pro robo: um comando de moveToGivenAngle, e moveAngleByGivenAmount ou algo assim. Aí alternar entre comandos que dao angulos diretamente, ou delta-angles, é trivial


Explicação:

a idéia é a seguinte:
- a gente aprende pra N angulos diferentes: pesos com fatiga, que geram um movimento sub-optimo; pesos otimos, que geram o movimento correto. A história por tras disso é que em varias situacoes a gente pode aprender rapidamente uma solucao/trajetoria, usando um simulador que é imperfeito mas rapido de usar, mas aí quando rodamos ela no robô real (que pode ter fadiga e ruido) ela nao roda super bem. Essa trajetoria, que nao roda super bem, é a nossa com fadiga. Nós poderiamos entao usar algum metodo de busca local para partir dessa trajetoria sub-optima e ir melhorando ela, até ela ficar otima: isso nos daria uma trajetoria "limpa"/otimo, que consegue pegar a bolinha. Nesses experimentos, nós estamos gerando os dados no sentido inverso (partimos da trajetoria limpa/otima ir geramos a trajetoria com fadiga), mas só fazemos assim porque é mais facil de fazer dessa forma: se quisessemos, a gente poderia facilmente partir da trajetoria com fadiga e rodar algum metodo, tipo hill climbing, pra partir dela e chegar nos pesos que pegam a bolinha de maneira perfeita. Isso nos daria exatamente os mesmos pesos que a gente tem agora, pra trajetoria "limpa"/otima, mas com um custo computacional mais alto. Enfim. A idéia é que temos, pra N angulos, a trajetoria imperfeita (mas rapida de calcular) e a trajetoria corrigida. Essas correspondem, no nosso dataset, às trajetorias com fadiga e sem fadiga, respectivamente
- A gente quer que aprender a pegar uma trajetoria imperfeita e rapidamente prever como corrigi-la, de forma que ela fique perfeita/otima, mas sem ter que usar metodos de busca local (que podem ser demorados). Para isso, iremos pegar os pesos da trajetoria imperfeita e usar regressao para prever que tipo de modificacao precisamos fazer nesses pesos, a fim de obter os pesos da trajetoria perfeita/otima
- nós podemos fazer várias hipoteses de que tipo de correcao deve ser feita nos pesos. A 1a hipotese é que basta somar um delta em cada peso: isso significa que a regressao iria prever o que eu chamo de delta-w. A 2a hipotese é que precisamos prever um valor para multiplicar cada peso: isso significa que a regressao iria prever o que eu chamo de ratio-w.
Para a 1a hipotese, o dataset consistiria de pares de
{angulo, delta=(w0_semFadiga - w0_fadiga) }
Para a 2a hipotese, o dataset consistiria de pares de
{angulo, delta=(w0_semFadiga/w0_fadiga) }
No 1o caso, a gente poderia entao usar o simulador imperfeito para rapidamente estimar os pesos de uma trajetoria (que seria imperfeita). Aí bastaria, para corrigi-los, somar o delta previsto pelo regressao do peso correspondente:
wi_corrigido = wi_imperfeito + delta_previsto_pela_regressao
No 2o caso, a gente poderia usar o simulador imperfeito para rapidamente estimar os pesos de uma trajetoria (que seria imperfeita). Aí bastaria, para corrigi-los, multiplicar delta previsto pelo regressao do peso correspondente:
wi_corrigido = wi_imperfeito * delta_previsto_pela_regressao
Acho que foi isso que tu explicou, tambem, mas só queria dar um pouco mais de detalhes para explicar a motivacao por tras da maneira como estamos gerando os dados

sim, ele está aprendendo a corrigir pra um tipo de imperfeicao do robo. Caso o robo de repente passe a ter caracteristicas fisicas diferentes (o atrito nas juntas aumenta duma hora pra outra), nossas predicoes iriam falhar

Mas isso é ok. Normalmente as caracteristicas do robo sao mais ou menos estaveis. O que é mais critico é que as solucoes calculadas em simulacao sao consistentemente diferentes das solucoes que realmente funcionam no robo—mas elas normalemnte diferem de uma maneira de nao é aleatoria; ou seja, que tem como ser prevista.

Mas isso é ok. Normalmente as caracteristicas do robo sao mais ou menos estaveis. O que é mais critico é que as solucoes calculadas em simulacao sao consistentemente diferentes das solucoes que realmente funcionam no robo—mas elas normalemnte diferem de uma maneira de nao é aleatoria; ou seja, que tem como ser prevista.

Depois que fizermos essa etapa de prever os deltas, etc, o proximo passo seria fazer o modelo de fadiga ser um pouco mais complexo: ao inves de sempre 30%, pode comecar com fadiga baixa no inicio do movimento, e ir aumentando conforme o movimento vai sendo executado (por o robo vai ficando mais cansado com o tempo e tal)
